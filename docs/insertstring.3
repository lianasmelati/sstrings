.\" Copyright 2005 by Pablo Yanez Trujillo <pabloy@pcpool.mathematik.uni-freiburg.de>
.\" The safe Strings Library Version 1.0.4
.\" 
.\" This is free software. Please read the file ../COPYING if you
.\" want to use/edit/distribuite this source file.
.\" This source file is protected by the GNU GPL-2
.\" NOTE: There is NO  warranty; not even for MERCHANTABILITY or 
.\" FITNESS FOR A PARTICULAR PURPOSE.
.TH "INSERTSTRING" "3" "July 2005" "Version 1.0.4" "Linux Programmer's Manual -- Safe Strings Library"
.SH "NAME"
insertnstring, insertstring, insertrnstring - Insert a string in a "safe string"
.SH "SYNOPSIS"
.B #include <sstrings.h>

.B Linking with -lsstrings
.sp
.BI "char *insertstring(char "**buffer ", const char "*src ", size_t "pos ");"
.br
.BI "char *insertnstring(char "**buffer ", const char "*src ", size_t "pos ", size_t "len ");"
.br
.BI "char *insertrnstring(char "**buffer ", const char "*src ", size_t "pos ", size_t "len ");"
.SH "DESCRIPTION"
This family of functions insert a string at a certain position of an "safe string" (string which memory
space was allocated with malloc/realloc). When \fI*buffer\fR is NULL a new "safe string" is created.

When \fIsrc\fR is NULL, nothing will be done.

The function \fBinsertstring\fR inserts the string \fIstr\fR at the position \fIpos\fR of \fI*buffer\fR.

The function \fBinsertnstring\fR inserts the first \fIlen\fR characters of \fIstr\fR at the position \fIpos\fR of \fI*buffer\fR.

The function \fBinsertrnstring\fR inserts the last \fIlen\fR characters of \fIstr\fR at the position \fIpos\fR of \fI*buffer\fR.

If you want to insert a string at the end, then you \fIpos\fR must be strlen(*buffer). See in the example above, that using 32
instead of 33 you would get: "Hello Dolly, this is Louis, Doll. It is nice ...y".
.SS "Returning value"
These functions return a pointer to \fI*buffer\fR. NULL will be returned if the operation wasn't successfully.
.SS "Error values for ss_errno"
\fBss_errno\fR is set to \fISS_NULL_BUFFER\fR if \fIbuffer\fR is NULL or \fIsrc\fR is NULL.

\fBss_errno\fR is set to \fISS_NO_ERROR\fR if \fIlen\fR is zero.

\fBss_errno\fR is set to \fISS_NO_EXPAND\fR if the functions is not able to resize the string.

Take a look at \fBappendnstring\fR(3) for more values. \fBss_errno\fR may change when this functions is called by one of the
3 functions of insert* family.
.SH "NOTES"
You should always proofe that the functions doesn't return NULL. \fIss_errno\fR is declared in the libraray and doesn't need to
be declared by yourself, just use it. Like errno from errno.h you must set it to SS_NO_ERROR by yourself (when SS_NO_ERROR is a posible
value when the returning pointer is NULL).

You must always free you buffers by yourself, don't forget it!

Read \fBsstrings\fR(5) for a list of the constants.
.SH "EXAMPLE"
.RS
.nf
	#include <stdio.h>
	#include <sstrings.h>

	int main(void)
	{
		char* x, *tmp;
		
		x = str2sstr("Hello Dolly, this is Dolly");

		if(!x)
		{
			fprintf(stderr, "You don't have enough memory\\n");
			return 1;
		}

		printf("%s\\n", x);

		tmp = insertnstring(&x, "Louis, Dolly", 21, 7);

		if(!tmp)
		{
			fprintf(stderr, "You don't have enough memory\\n");
			free(x); /* very important */
			return 1;
		}

		if(tmp != x)
			x = tmp; /* old x doesn't need to be freed, it is already freed */

		printf("%s\\n", x);

		tmp = insertrnstring(&x, "nsjjshhjshs. It is nice ...", 33, 16);

		if(!tmp)
                {
                        fprintf(stderr, "You don't have enough memory\\n");
                        free(x); /* very important */
                        return 1;
                }

                if(tmp != x)
                        x = tmp; /* old x doesn't need to be freed, it is already freed */

		printf("%s\\n", x);

		free(x);

		/* output:
		Hello Dolly, this is Dolly
		Hello Dolly, this is Louis, Dolly
		Hello Dolly, this is Louis, Dolly. It is nice ...
		*/
		
		return 0;
	}
.fi
.RE
.SH "BUGS"
I don't know about any bugs. But I would be very happy to know one if you find one. Please report bugs at
pabloy@pcpool.mathematik.uni-freiburg.de
.SH "SEE ALSO"
.BR insertnstring (3)
.BR insertstring (3)
.BR insertrnstring (3)
.BR appendnstring (3)
.BR appendstring (3)
.BR stringappend (3)
.BR stringnappend (3)
